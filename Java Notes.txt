Note: A class cannot be private or protected except nested class.

Non Access Modifiers in Java -> Static, Final, Abstract

A Java constructor cannot be abstract, static, final, and synchronized

Method Overloading:-

   class A{  
    protected void msg(){System.out.println("Hello java");}  
    }  
      
    public class Simple extends A{  
    void msg(){System.out.println("Hello java");}//C.T.Error  
	//The default modifier is more restrictive than protected. That is why there is compile time error.
     public static void main(String args[]){  
       Simple obj=new Simple();  
       obj.msg();  
       }  
    }  

	
Rule: Runtime polymorphism can't be achieved by data members.

class Bike{  
 int speedlimit=90;  
}  
class Honda3 extends Bike{  
 int speedlimit=150;  
  
 public static void main(String args[]){  
  Bike obj=new Honda3();  
  System.out.println(obj.speedlimit);//90  
} 

Try for Output

    class Animal{  
    void eat(){System.out.println("animal is eating...");}  
    }  
    class Dog extends Animal{  
    void eat(){System.out.println("dog is eating...");}  
    }  
    class BabyDog1 extends Dog{  
    public static void main(String args[]){  
    Animal a=new BabyDog1();  
    a.eat();  
    }}  


* Iterator is thread safe, if modified throws "Concurrent Modification Exception"

* Hash Map :-

  Key-Value -> Map.Entry
  
  Methods -> hashcode(), equals()
  
  put(set) , get(retrieve) 
  
* Collection Classes 
  -> java.util package - fail-fast
  -> java.util.concurrent package - fail-safe (No Exception)
  
*  https://www.programmingsimplified.com/java-source-codes
  
  Java program to get IP address
  
  import java.net.InetAddress;
 
class IPAddress
{
  public static void main(String args[]) throws Exception
  {
    System.out.println(InetAddress.getLocalHost());
  }
}

Java program to perform garbage collection

import java.util.*;
 
class GarbageCollection
{
  public static void main(String s[]) throws Exception
  {
    Runtime rs = Runtime.getRuntime();
    System.out.println("Free memory in JVM before Garbage Collection = "+rs.freeMemory());
    rs.gc();
    System.out.println("Free memory in JVM after Garbage Collection = "+rs.freeMemory());
  }
}

Java program to open Notepad

import java.util.*;
import java.io.*;
 
class Notepad {
  public static void main(String[] args) {
    Runtime rs = Runtime.getRuntime();
 
    try {
      rs.exec("notepad");
    }
    catch (IOException e) {
      System.out.println(e);
    }
  }
}

